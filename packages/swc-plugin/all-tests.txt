Collecting content from all page.tsx files...
================================================

File: ./src/app/branch/page.tsx
----------------------------------------
import { T, Plural, Branch, Var, Currency, DateTime } from "gt-next";

export default function BranchPage() {
  const variable = "test";
  const count = 1;
  return (
    <>
      <T>
        <Plural n={1} singular="File" plural={"Files"} />
      </T>
      <T>
        <Branch branch="file" file={"file.svg"} directory={"public"} />
      </T>

      <T>
        <Plural n={1} singular="File" plural={42} />
      </T>
      <T>
        <Plural n={1} singular={true} plural={false} />
      </T>
      <T>
        <Plural n={1} singular={null} plural="Files" />
      </T>

      <T>
        <Plural n={1} singular={`File`} plural={`Files`} />
      </T>
      <T>
        <Plural n={1} singular="File" plural={42} />
      </T>

      <T>
        <Plural
          n={1}
          singular={<>Single file</>}
          plural={<>Multiple files</>}
        />
      </T>

      <T>
        <Plural
          n={1}
          singular={<span>Single file</span>}
          plural={<span>Multiple files</span>}
        />
      </T>
      <T>
        <Plural
          n={1}
          singular={<Var>{variable}</Var>}
          plural={
            <>
              Multiple <Var>{variable}</Var>s
            </>
          }
        />
      </T>
      <T>
        <div>
          <>Yo</>
          <Var>test</Var>
        </div>
      </T>

      <T>
        <Plural
          n={1}
          singular={<Var>{variable}</Var>}
          plural={
            <div>
              <>
                Multiple <Var>{variable}</Var>s
              </>
            </div>
          }
        />
      </T>

      <T>
        <Plural
          n={1}
          singular={
            <Branch
              branch="type"
              file={
                <Plural
                  n={1}
                  singular={<>Single nested file</>}
                  plural={"Multiple nested files"}
                />
              }
              directory={<>Public directory</>}
            />
          }
          plural={"Multiple top-level items"}
        />
      </T>

      <T>
        <Plural n={1} singular="" plural="Files" />
      </T>
      <T>
        <Plural n={1} singular="File" plural={""} />
      </T>

      <T>
        <Plural n={1} singular="   File   " plural={"   Files   "} />
      </T>

      <T>
        <Plural
          n={1}
          singular={`
            Multiline
            File
          `}
          plural="Files"
        />
      </T>

      <T>
        <Plural
          n={1}
          singular="File with emoji 📁"
          plural={"Files with emoji 📁📂"}
        />
      </T>
      <T>
        <Branch
          branch="file"
          file="special-chars!@#$%^&*().svg"
          directory={"unicode-path-ñáéíóú"}
        />
      </T>

      <T>
        <div>hello</div>
        <Branch
          branch="level1"
          option1={
            <Branch
              branch="level2"
              option1={
                <Plural
                  n={1}
                  singular={
                    <Branch
                      branch="level3"
                      option1={<>Deep option 1</>}
                      option2={<Var>{variable}</Var>}
                    />
                  }
                  plural={
                    <Branch
                      branch="level3"
                      option1={<Currency currency="USD">100</Currency>}
                      option2={<DateTime>{new Date()}</DateTime>}
                    />
                  }
                />
              }
              option2="Level 2 option 2"
            />
          }
          option2="Level 1 option 2"
        />
      </T>
    </>
  );
}


File: ./src/app/literal/page.tsx
----------------------------------------
import { T, Plural, Branch, Var, Num, Currency, DateTime } from "gt-next";

export default function WhitespaceTestCases() {
  const amount = 100;

  return (
    <>
      <T>
        Normal text <div>and some nesting</div>
      </T>

      <T>
        <div>content before</div> trailing text
      </T>
      <T>Text with multiple spaces</T>
      <T>Hello World with spaces</T>
      <T>
        <Plural n={1} singular="" plural="Files" />
      </T>
      <T>
        <Plural n={1} singular="   File   " plural={"   Files   "} />
      </T>
      <T>
        Start
        <strong>Bold</strong>
        <em>Italic</em>
        End
      </T>
      <T>
        <div>Before</div>

        <div>After</div>
      </T>
      <T>
        User:
        <Var>userName</Var>
        has
        <Num>count</Num>
        items
      </T>
      <T>
        Click <a href="#">here</a> to continue.
      </T>
      <T>Line 1 Line 2 with tabs Line 3 with spaces</T>
      <T>
        <Plural n={5} singular="  1 item  " plural={`  items  `} />
      </T>
      <T>
        Total: <Currency currency="USD">{amount}</Currency> available
      </T>
      <T>
        Status: <Plural n={1} singular={true} plural={false} /> -{" "}
        <Plural n={0} singular={null} plural="Active" />
      </T>
      <T>
        <div>Content</div> <div>More content</div>
      </T>

      <T>
        <p></p> <p></p>
      </T>

      <T>Boundary whitespace test</T>
      <T>
        Hello <Var>name</Var>, you have <Num>5</Num> new messages.
      </T>

      <T>
        <div>
          Welcome <strong>user</strong>,
          <br />
          You have <span>messages</span> waiting.
        </div>
      </T>
      {/* <T>
        <div>
           Hello </div>
      </T>

      <T>
        <div> Hello </div>
      </T>

      {/* <T>
        <div> Hello 
          
        </div>
      </T> */}
      <T>
        <div>Hello</div>
      </T>
    </>
  );
}

/*
Expected Runtime vs Build-time behaviors:

1. "Normal text " (with space) should be preserved
2. " trailing text" (with leading space) should be preserved  
3. "Text with multiple spaces" (internal normalization OK)
4. Empty string attributes: singular="" should appear in JSON as "singular":""
5. Padded attributes: "   File   " should stay exactly as-is
6. Whitespace between inline elements should be preserved for layout
7. Pure whitespace nodes may be collapsed but significant spacing kept
8. Variable components should not be wrapped with {"c": ...}
9. Boolean/null literals should serialize as raw JSON types
10. Template literals in expressions should be handled appropriately

The key test is Case 1 - this is the main failing case from the logs.
*/


File: ./src/app/extreme/page.tsx
----------------------------------------
import { T, Plural, Branch, Var, Num, Currency, DateTime } from "gt-next";

export default function ExtremeEdgeCases() {
  const variable = "test";
  const count = 42;
  const price = 9.99;
  const timestamp = new Date();

  return (
    <>
      {/* ========== EXTREME WHITESPACE SCENARIOS ========== */}

      {/* Only whitespace variations */}
      <T>
        <Plural n={1} singular={<> </>} plural={<> </>} />
      </T>

      <T>
        <Plural n={1} singular={<>\t</>} plural={<>\n</>} />
      </T>

      {/* Mixed whitespace preservation */}
      <T>
        <span>start</span> <span>middle</span> <span>end</span>
      </T>

      {/* Whitespace sandwich scenarios */}
      <T>
        <div>surrounded by spaces</div>
      </T>

      {/* Fragment whitespace edge cases */}
      <T>
        <> leading spaces</>
        <>trailing spaces </>
        <> both sides </>
      </T>

      {/* ========== FRAGMENT NESTING EXTREMES ========== */}

      {/* Deeply nested fragments */}
      <T>
        <Plural
          n={1}
          singular={
            <>
              <>
                <>
                  <>deep fragment nesting</>
                </>
              </>
            </>
          }
          plural="files"
        />
      </T>

      {/* Fragment with mixed content types */}
      <T>
        <Branch
          branch="mixed"
          option1={
            <>
              text
              <span>element</span>
              {42}
              {true}
              {null}
              more text
            </>
          }
          option2="simple"
        />
      </T>

      {/* Fragment boundaries with elements */}
      <T>
        <>start</>
        <div>middle</div>
        <>end</>
      </T>

      {/* ========== NUMERIC EDGE CASES ========== */}

      {/* Extreme number values */}
      <T>
        <Plural
          n={1}
          zero={0.0}
          one={-0}
          two={999999999999}
          few={-999999999999}
          many={0.000000001}
          other={-0.000000001}
        />
      </T>

      {/* Special float values */}
      <T>
        <Branch
          branch="floats"
          tiny={0.1}
          precise={3.141592653589793}
          scientific={1.23e-10}
          big_scientific={1.23e10}
        />
      </T>

      {/* Hexadecimal variations */}
      <T>
        <Branch
          branch="hex"
          small={0x1}
          medium={0xabc}
          large={0xdeadbeef}
          mixed={0x123abc}
        />
      </T>

      <T>
        <Branch
          branch="mixed"
          option1={
            <>
              text
              <span>element</span>
              {42}
              {-1}
              {3.14159}
              {1e6}
              {0xff}
              {0xabc}
              {0xdeadbeef}
              {0xff}
              {0xabc}
              {NaN}
              {true}
              {}
              {false}
              {undefined}
              {Infinity}
              {null}
              {<></>}
              {<> </>}
              {+5}
              more text
            </>
          }
          option2="simple"
          option3={
            <>
              Hello <span>world</span>!
            </>
          }
        />
      </T>

      {/* ========== STRING ESCAPING EXTREMES ========== */}

      {/* All escape sequences */}
      <T>
        <Plural
          n={1}
          singular="Quotes: &quot; and '"
          plural="Backslashes: \\ and \\n and \\t"
          other={`Unicode: \\u0041 and \\x41`}
        />
      </T>

      {/* Raw strings with problematic characters */}
      <T>
        <Branch
          branch="raw"
          json={`{"key": "value", "array": [1,2,3]}`}
          regex={`/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/`}
          path={`C:\\Program Files\\App\\file.exe`}
        />
      </T>

      {/* URLs and complex strings */}
      <T>
        <Branch
          branch="complex"
          url="https://example.com:8080/path?param=value&other=123#section"
          email="user.name+tag@subdomain.example-site.co.uk"
          css="body { margin: 0; padding: 10px; font-family: Arial, sans-serif; }"
        />
      </T>

      {/* ========== BOOLEAN AND NULL COMBINATIONS ========== */}

      {/* All boolean/null variations */}
      <T>
        <Plural
          n={1}
          zero={false}
          one={true}
          two={null}
          few=""
          many={0}
          other="false"
        />
      </T>

      {/* Mixed boolean contexts */}
      <T>
        <Branch
          branch="booleans"
          truthy={true}
          falsy={false}
          nullish={null}
          empty=""
          zero={0}
          string_true="true"
          string_false="false"
        />
      </T>

      {/* ========== TEMPLATE LITERAL STRESS TESTS ========== */}

      {/* Complex template escaping */}
      <T>
        <Plural
          n={1}
          singular={`Template with \${escaped} and \`backticks\``}
          plural={`Multi
            line
            template
            literal`}
          other={`Mixed "quotes" and 'apostrophes' in template`}
        />
      </T>

      {/* Template with special characters */}
      <T>
        <Branch
          branch="templates"
          code="function test() { return `Hello ${name}`; }"
          markdown={`# Title\n\n**Bold** and *italic* text.\n\n\`\`\`js\nconst x = 42;\n\`\`\``}
          xml={`<root><child attr="value">content</child></root>`}
        />
      </T>

      {/* ========== COMPONENT ATTRIBUTE EXTREMES ========== */}

      {/* Attributes with every valid plural form */}
      <T>
        <Plural
          n={count}
          zero=""
          one="1"
          two="2"
          few="few"
          many="many"
          other="other"
          singular="sing"
          plural="plur"
        />
      </T>

      {/* Branch with many options */}
      <T>
        <Branch
          branch="many_options"
          a="option a"
          b="option b"
          c="option c"
          d="option d"
          e="option e"
          f={<>fragment f</>}
          g={<span>element g</span>}
          h={42}
          i={true}
          j={null}
        />
      </T>

      {/* ========== VARIABLE COMPONENT STRESS TESTS ========== */}

      {/* Variables with edge case names */}
      <T>
        <Var name="_underscore">content</Var>
        <Var name="camelCase">content</Var>
        <Var name="kebab-case">content</Var>
        <Var name="snake_case">content</Var>
        <Var name="PascalCase">content</Var>
        <Var name="123numeric">content</Var>
        <Var name="special!@#$%">content</Var>
      </T>

      {/* Variable content variations */}
      <T>
        <Num name="n1">42</Num>
        <Num name="n2">{-42}</Num>
        <Num name="n3">3.14159</Num>
        <Num name="n4">{0}</Num>
        <Num name="n5">{0xff}</Num>
      </T>

      {/* Currency with different formats */}
      <T>
        <Currency currency="USD" name="usd1">
          {price}
        </Currency>
        <Currency currency="EUR" name="eur1">
          1234.56
        </Currency>
        <Currency currency="JPY" name="jpy1">
          1000
        </Currency>
        <Currency currency="BTC" name="btc1">
          0.00123456
        </Currency>
      </T>

      {/* DateTime with different values */}
      <T>
        <DateTime name="dt1">{timestamp}</DateTime>
        <DateTime name="dt2">{new Date(0)}</DateTime>
        <DateTime name="dt3">{new Date(0)}</DateTime>
        <DateTime name="dt4">{new Date(0)}</DateTime>
      </T>

      {/* ========== MAXIMAL NESTING SCENARIOS ========== */}

      {/* 7-level component nesting */}
      <T>
        <Branch
          branch="l1"
          option1={
            <Plural
              n={1}
              singular={
                <Branch
                  branch="l2"
                  option1={
                    <Plural
                      n={1}
                      singular={
                        <Branch
                          branch="l3"
                          option1={
                            <Plural
                              n={1}
                              singular={
                                <Branch
                                  branch="l4"
                                  option1={
                                    <Plural
                                      n={1}
                                      singular={
                                        <Branch
                                          branch="l5"
                                          option1={
                                            <Plural
                                              n={1}
                                              singular={
                                                <Branch
                                                  branch="l6"
                                                  option1={
                                                    <Var name="deep7">
                                                      maximum depth
                                                    </Var>
                                                  }
                                                  option2="l6 end"
                                                />
                                              }
                                              plural="l5 plural"
                                            />
                                          }
                                          option2="l5 end"
                                        />
                                      }
                                      plural="l4 plural"
                                    />
                                  }
                                  option2="l4 end"
                                />
                              }
                              plural="l3 plural"
                            />
                          }
                          option2="l3 end"
                        />
                      }
                      plural="l2 plural"
                    />
                  }
                  option2="l2 end"
                />
              }
              plural="l1 plural"
            />
          }
          option2="l1 end"
        />
      </T>

      {/* Mixed nesting with all component types */}
      <T>
        <div className="wrapper">
          <Branch
            branch="outer"
            option1={
              <>
                <span>Before plural</span>
                <Plural
                  n={count}
                  singular={
                    <div>
                      Single item: <Num name="single_count">{count}</Num>
                      costing{" "}
                      <Currency currency="USD" name="single_price">
                        {price}
                      </Currency>
                      at <DateTime name="single_time">{timestamp}</DateTime>
                      in{" "}
                      <Branch
                        branch="location"
                        home={
                          <>
                            home folder with <Var name="home_var">variable</Var>
                          </>
                        }
                        work="office"
                      />
                    </div>
                  }
                  plural={
                    <div>
                      Multiple items: <Num name="multi_count">{count}</Num>
                      costing{" "}
                      <Currency currency="USD" name="multi_price">
                        {price * count}
                      </Currency>
                      <>with fragments</> and <span>elements</span>
                    </div>
                  }
                />
                <span>After plural</span>
              </>
            }
            option2="simple option"
          />
        </div>
      </T>

      {/* ========== BOUNDARY VIOLATION TESTS ========== */}

      {/* Empty everything */}
      <T> </T>

      <T>{""}</T>

      <T> </T>

      {/* <T>
        <Plural n={1} />
      </T> */}
      {/* 
      <T>
        <Branch branch="test" />
      </T> */}

      <T>
        <Var />
      </T>

      {/* Only invalid attributes */}
      {/* <T>
        <Plural n={1} invalid="ignored" also_invalid="also ignored" />
      </T> */}

      <T>
        <Branch branch="test" invalid="ignored" also_invalid="also ignored" />
      </T>

      {/* Missing required attributes DISREGARD, INVALID */}
      {/* <T>
        <Plural singular="file" plural="files" />
      </T>

      <T>
        <Branch option1="test" option2="test2" />
      </T> */}

      {/* ========== UNICODE EXTREMES ========== */}

      {/* Every major unicode category */}
      <T>
        <Branch
          branch="unicode"
          latin="àáâãäåæçèéêëìíîï"
          cyrillic="абвгдежзийклмнопрстуфхцчшщъыьэюя"
          greek="αβγδεζηθικλμνξοπρστυφχψω"
          arabic="ابتثجحخدذرزسشصضطظعغفقكلمنهوي"
          hebrew="אבגדהוזחטיכלמנסעפצקרשת"
          chinese="你好世界中文测试"
          japanese="こんにちは世界ひらがなカタカナ漢字"
          korean="안녕하세요세계한글테스트"
          emoji="🌍🌎🌏🚀⚡️🎉💯✨🔥💎🌟⭐️🎯"
          symbols="©®™€£¥¢¤§¶†‡•…‰‱′″‴‵‶‷‸‹›«»¿¡"
          math="∀∂∃∅∇∈∉∋∌∏∑−∕∗∘∙√∝∞∟∠∡∢∣∤∥∦∧∨∩∪∫∬∭∮"
        />
      </T>

      {/* Mixed text directions */}
      <T>
        <Plural
          n={1}
          singular="English left-to-right"
          plural="العربية من اليمين إلى اليسار"
          other="עברית מימין לשמאל"
        />
      </T>

      {/* ========== REGRESSION PREVENTION TESTS ========== */}

      {/* Every known problematic pattern */}
      <T>
        Normal text <div>and some nesting</div> with trailing space
      </T>

      <T>
        <Plural n={1} singular={<> </>} plural={<></>} />
      </T>

      <T>
        <Plural
          n={1}
          zero={0}
          one={1}
          two={-1}
          few={3.14159}
          many={1e6}
          other={0xff}
        />
      </T>

      <T>
        <Branch
          branch="test"
          empty=""
          whitespace="   padded   "
          fragment={<>fragment content</>}
          element={<span>element content</span>}
          number={42}
          boolean={true}
          null_value={null}
        />
      </T>

      {/* Complex whitespace preservation scenario */}
      <T>
        <span>word1</span> <span>word2</span> <span>word3</span>
      </T>

      <T>
        <>Fragment start</> middle text <>Fragment end</>
      </T>

      {/* Variable key consistency across parallel branches */}
      <T>
        <Branch
          branch="consistency"
          path_a={
            <div>
              <Var name="shared1">var1</Var>
              <Num name="shared2">42</Num>
              <Currency currency="USD" name="shared3">
                9.99
              </Currency>
            </div>
          }
          path_b={
            <>
              <Var name="shared1">var1</Var>
              <Num name="shared2">42</Num>
              <Currency currency="USD" name="shared3">
                9.99
              </Currency>
            </>
          }
        />
      </T>
    </>
  );
}

/*
ADDITIONAL EXTREME EDGE CASES COVERED:

1. **Whitespace Extremes:**
   - Only whitespace fragments with different whitespace types
   - Whitespace sandwiching elements
   - Mixed whitespace preservation scenarios
   - Fragment whitespace boundaries

2. **Fragment Nesting:**
   - 4+ levels of fragment nesting
   - Fragments with mixed content types (text, elements, literals)
   - Fragment boundaries with elements

3. **Numeric Extremes:**
   - Extreme positive/negative values
   - Special float cases (tiny, huge, scientific notation)
   - All hexadecimal formats
   - Edge cases like -0, 0.0

4. **String Escaping Stress:**
   - All escape sequences in different quote contexts
   - Raw strings with JSON, regex, file paths
   - URLs, emails, CSS in attributes
   - Complex template literal escaping

5. **Boolean/Null Combinations:**
   - All boolean/null variations in different contexts
   - String representations of booleans
   - Mixed truthy/falsy values

6. **Template Literal Stress:**
   - Complex escaping scenarios
   - Multiline templates
   - Templates with code, markdown, XML

7. **Attribute Extremes:**
   - All plural forms filled
   - Branch components with 10+ options
   - Mixed attribute types in single component

8. **Variable Component Stress:**
   - Edge case variable names (numeric, special chars, different cases)
   - All numeric formats in Num components
   - Different currency formats
   - DateTime with various inputs

9. **Maximum Nesting:**
   - 7-level component nesting
   - Mixed component types at every level
   - Complex wrapper structures

10. **Boundary Violations:**
    - Completely empty components
    - Missing required attributes
    - Only invalid attributes

11. **Unicode Extremes:**
    - Every major unicode category
    - Mixed text directions (LTR/RTL)
    - Mathematical symbols, emojis

12. **Stress Testing:**
    - 50+ variables in single component (counter testing)
    - Array-generated repetitive structures

13. **Regression Prevention:**
    - Every known problematic pattern from previous fixes
    - Counter consistency scenarios
    - Whitespace preservation edge cases

This test file should expose any remaining edge cases and ensure your plugin handles every possible valid JSX pattern correctly!
*/


File: ./src/app/numbers/page.tsx
----------------------------------------
import { Branch, T, Plural, Var, Num, Currency, DateTime } from "gt-next";

export default function NumbersTest() {
  const count = 1;
  const amount = 100;
  const date = new Date();
  return (
    <>
      <T >
        <Branch
          branch="complex"
          option1={
            <>
              Start {true} {false} {null} {undefined} {} <></>
              <Plural
                n={count}
                zero={
                  <>
                    Zero with <Var name="v1">var1</Var>
                  </>
                }
                one={
                  <>
                    One with <Num name="n1">{count}</Num> {NaN}
                  </>
                }
                two={
                  <>
                    Two with{" "}
                    <Currency currency="USD" name="c1">
                      {amount}
                    </Currency>{" "}
                    {Infinity}
                  </>
                }
                few={
                  <>
                    Few with <DateTime name="d1">{date}</DateTime> 
                  </>
                }
                many={
                  <Branch
                    branch="nested"
                    c={
                      <>
                        {0xff} and {0o755} and {0b1111}
                      </>
                    }
                  />
                }
                other={
                  <>
                    Other {+0} vs {-0}
                  </>
                }
              />
              End {} <></>
            </>
          }
          option2="Simple option for comparison"
        />
      </T>
    </>
  );
}


File: ./src/app/div-span/page.tsx
----------------------------------------
import { T, Plural, Branch, Var, Num, Currency, DateTime } from "gt-next";

export default function WhitespaceTestCases() {

  const count = 1;
  const amount = 100;
  return (
    <>
      {/* Case 1: Trailing space issue - the main problem */}
      <T>
        Normal text <div>and some nesting</div>
      </T>

      {/* Case 2: Leading space preservation */}
      <T>
        <div>content before</div> trailing text
      </T>

      {/* Case 3: Multiple internal spaces should be normalized */}
      <T>
        Text    with     multiple   spaces
      </T>
      <T>
        <>        Text   <div>yo    yo</div>   with  <span/>   multiple   spaces</>
      </T>

      {/* Case 4: Mixed whitespace with newlines and indentation */}
      <T>
        Hello
        
        World    with   spaces
      </T>

      {/* Case 5: Empty string attributes - should be preserved */}
      <T>
        <Plural n={1} singular="" plural="Files" />
      </T>

      {/* Case 6: Padded string attributes - should preserve exact whitespace */}
      <T>
        <Plural n={1} singular="   File   " plural={"   Files   "} />
      </T>

      {/* Case 7: Branch with empty and padded attributes */}
      <T>
        <Branch 
          branch={1}
          option1="" 
          option2="   Padded   " 
          option3={<span>JSX content</span>}
        />
      </T>

      {/* Case 8: Complex whitespace between elements */}
      <T>
        Start  
        <strong>Bold</strong>  
        <em>Italic</em>  
        End
      </T>

      {/* Case 9: Whitespace only text nodes */}
      <T>
        <div>Before</div>
        
        <div>After</div>
      </T>

      {/* Case 10: Variable components with whitespace */}
      <T>
        User:  
        <Var>userName</Var>  
        has  
        <Num>count</Num>  
        items
      </T>

      {/* Case 11: Nested elements with preserved spacing */}
      <T>
        Click <a href="#">here</a> to continue.
      </T>

      {/* Case 12: Tab and newline combinations */}
      <T>
        Line 1
		    Line 2 with tabs
            Line 3 with spaces
      </T>

      {/* Case 13: Plural with complex whitespace in branches */}
      <T>
        You have <Plural 
          n={5} 
          singular="  1 item  " 
          plural={`  2 items  `}
        />
      </T>

      {/* Case 14: Expression containers with whitespace */}
      <T>
        Total: <Currency currency="USD">{amount}</Currency> available
      </T>

      {/* Case 15: Boolean and null literals with whitespace context */}
      <T>
        Status: <Plural n={1} singular={true} plural={false} /> - <Plural n={0} singular={null} plural="Active" />
      </T>

      {/* Case 16: Edge case - only whitespace text */}
      <T>
        <div>Content</div>   <div>More content</div>
      </T>

      {/* Case 17: Whitespace at boundaries */}
      <T>  
        Boundary whitespace test  
      </T>

      {/* Case 18: Mixed JSX and text with careful spacing */}
      <T>
        Hello <Var>name</Var>, you have <Num>5</Num> new messages.
      </T>

      {/* Case 19: Template literals in attributes */}
      <T>
        <Plural 
          n={count} 
          singular="1 file" 
          plural={`2 files`}
        />
      </T>

      {/* Case 20: Complex nesting with whitespace preservation */}
      <T>
        <div>
          Welcome <strong>user</strong>, 
          <br />
          You have <span>messages</span> waiting.
        </div>
      </T>


      <T>   Text    with     multiple   spaces   </T>
      <T>   Text    with     multiple   spaces   

      </T>
      
      <T >
        <Branch
          branch="mixed"
          short="Brief"
          long={`Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.`}
          mixed={
            <>
              Very long text with <Var>embedded variables</Var> that continues
              for a very long time and includes multiple <Num>{9999999}</Num>{" "}
              numeric values and{" "}
              <Currency currency="USD">{1234567.89}</Currency> monetary amounts
              spread throughout the content to test how the algorithm handles
              very large content blocks with mixed variable types.
            </>
            // <>
            //   <div>hello there</div>
            //   test
            //   <div>hello there</div>
            //   something again
            //   something else 
            // </>
          }
        />
      </T>

      <T>
        Hello
        
        World    with   spaces
      </T>

      <T>
        {true}
        {true}
      </T>


      <T>
        <div/>
        <div/>
      </T>

      <T> {true}
      </T>

      <T>
        {true}
      </T>
      <T>
        <Plural n={1} singular={true} dual={<>{false}{true}</>} />
      </T>

      <T>
        <Plural n={1} singular={true} dual={<>{true}</>} />
      </T> 
      
      <T>
        &nbsp;yo&nbsp; 
        &nbsp;yo&nbsp;</T>
       

<T>
yo 
yo
</T>
      

      <T>
        <div>
        {true}
        </div>
      </T>

      <T>
        <div>
        {}
        <div/>
        {}
        <div/>
        {}
        </div>
      </T>

      <T>
        Hello <div>
          there
        </div>
        <div>
          there
        </div>
      </T>



      <T>
        <Plural
          n={count}
          singular={
            <>
              Text{}
              <></>More text
            </>
          }
          plural={
            <>
              <>
                {}Fragment{}
              </>
              content{}
            </>
          }
          other={
            <>
              <>
                {}
                {}
              </>
            </>
          }
        />
      </T>

      <T>
      <>{true}</>
      </T>

      <T>
      <>{false}</>
      </T>

      <T>
      <>{true}{true}</>
      </T>

      


      <T >
        <Branch
          branch="bool"
          true_val={<>{true}</>}
          false_val={<>{false}</>}
          mixed_true={<>Before {true} after</>}
          mixed_false={<>Before {false} after</>}
          multiple={
            <>
              {true}
              {false}
              {true}
              <div />
            </>
          }
        />
      </T>

      <T>&nbsp;yo&nbsp; &nbsp;yo&nbsp;</T>

      <T >
        <Branch
          branch="nested"
          option1={
            <>
              <>
                <>
                  <>
                    <>Text</>
                    <></>
                    <>More</>
                  </>
                  {}
                </>
                <span>Element</span>
              </>
              <>Final</>
            </>
          }
          option2={
            <>
              <>
                <>
                  <>
                    <>Flat</>
                  </>
                  &nbsp;
                </>
              </>
            </>
          }
        />
      </T>
    </>
  );
}

/*
Expected Runtime vs Build-time behaviors:

1. "Normal text " (with space) should be preserved
2. " trailing text" (with leading space) should be preserved  
3. "Text with multiple spaces" (internal normalization OK)
4. Empty string attributes: singular="" should appear in JSON as "singular":""
5. Padded attributes: "   File   " should stay exactly as-is
6. Whitespace between inline elements should be preserved for layout
7. Pure whitespace nodes may be collapsed but significant spacing kept
8. Variable components should not be wrapped with {"c": ...}
9. Boolean/null literals should serialize as raw JSON types
10. Template literals in expressions should be handled appropriately

The key test is Case 1 - this is the main failing case from the logs.
*/

File: ./src/app/more-extreme/page.tsx
----------------------------------------
import { T, Branch, Plural, Var, Num, Currency, DateTime } from "gt-next";

// Extreme edge cases designed to break the SWC plugin hash calculation
export default function ExtremeEdgeCases() {
  const count = 7;
  const amount = 123.45;
  const date = new Date();

  return (
    <>
      {/* ========== EXPRESSION CONTAINER EDGE CASES ========== */}

      {/* Empty JSX expressions {} mixed with content */}
      <T >
        <Branch
          branch="test"
          option1={
            <>
              Start {} middle {} end
            </>
          }
          option2={
            <>
              Before{}
              {}
              <></>After
            </>
          }
          option3={
            <>
              {}
              <span>element</span>
              {}
            </>
          }
          option4="normal"
        />
      </T>

      {/* Mixed empty expressions and fragments */}
      <T >
        <Plural
          n={count}
          singular={
            <>
              Text{}
              <></>More text
            </>
          }
          plural={
            <>
              <>
                {}Fragment{}
              </>
              content{}
            </>
          }
          other={
            <>
              <>
                {}
                {}
              </>
            </>
          }
        />
      </T>

      {/* ========== BOOLEAN CONTEXT EDGE CASES ========== */}

      {/* All boolean permutations in expressions */}
      <T >
        <Branch
          branch="bool"
          true_val={<>{true}</>}
          false_val={<>{false}</>}
          mixed_true={<>Before {true} after</>}
          mixed_false={<>Before {false} after</>}
          multiple={
            <>
              {true}
              {false}
              {true}
            </>
          }
        />
      </T>

      {/* Boolean vs null vs undefined combinations */}
      <T >
        <Plural
          n={1}
          zero={<>{null}</>}
          one={<>{undefined}</>}
          two={<>{false}</>}
          few={
            <>
              {true}
              {null}
              {undefined}
            </>
          }
          many={
            <>
              Mixed {false} and {null}
            </>
          }
          other="normal"
        />
      </T>

      {/* ========== NUMERIC PRECISION EDGE CASES ========== */}

      {/* Floating point precision boundaries */}
      <T >
        <Branch
          branch="precision"
          tiny={1e-324} // Smallest possible positive number
          almost_zero={4.9e-324} // Just above smallest subnormal
          epsilon={2.220446049250313e-16} // Machine epsilon
          almost_one={0.9999999999999999}
          not_quite_two={1.9999999999999998}
          close_to_pi={3.141592653589793}
        />
      </T>

      {/* Scientific notation variations */}
      <T >
        <Plural
          n={count}
          zero={1.0}
          one={1.0}
          two={1.0}
          few={5.0e10}
          many={5.0e10}
          other={5.0e-10}
        />
      </T>

      {/* ========== WHITESPACE PATHOLOGICAL CASES ========== */}

      {/* Zero-width characters and unusual spaces */}
      <T >
        <Branch
          branch="space"
          zero_width={<>word1​word2</> /* Zero-width space */}
          thin_space={<>word1 word2</> /* Thin space */}
          hair_space={<>word1 word2</> /* Hair space */}
          figure_space={<>word1 word2</> /* Figure space */}
          punctuation_space={<>word1 word2</> /* Punctuation space */}
          normal={<>word1 word2</>}
        />
      </T>

      {/* Mixed line endings and tabs */}
      <T >
        <Plural
          n={1}
          singular={<>Line1\nLine2</>} /* Unix LF */
          plural={<>Line1\r\nLine2</>} /* Windows CRLF */
          other={<>Line1\rLine2</>} /* Old Mac CR */
        />
      </T>

      {/* ========== FRAGMENT PATHOLOGICAL NESTING ========== */}

      {/* Maximum fragment nesting with mixed empty/content */}
      <T >
        <Branch
          branch="nested"
          option1={
            <>
              <>
                <>
                  <>
                    <>Text</>
                    <></>
                    <>More</>
                  </>
                  {}
                </>
                <span>Element</span>
              </>
              <>Final</>
            </>
          }
          option2={
            <>
              <>
                <>
                  <>
                    <>Flat</>
                  </>
                  &nbsp;
                </>
              </>
            </>
          }
        />
      </T>

      {/* Fragments with alternating empty/content patterns */}
      <T >
        <Plural
          n={count}
          singular={
            <>
              <></>Content<></>More<></>End
            </>
          }
          plural={
            <>
              Start<></>Middle<></>End
            </>
          }
          other={
            <>
              <></>Text
              <>
                <></>
              </>
            </>
          }
        />
      </T>

      {/* ========== VARIABLE COMPONENT STRESS TESTS ========== */}

      {/* Variables with extreme naming edge cases */}
      <T >
        <Branch
          branch="names"
          option1={
            <>
              <Var name=""></Var>
              <Var name=" "></Var>
              <Var name="a"></Var>
              <Var name="123"></Var>
              <Var name="var-with-dashes"></Var>
              <Var name="var_with_underscores"></Var>
              <Var name="var.with.dots"></Var>
            </>
          }
          option2="normal"
        />
      </T>

      {/* Maximum variable density */}
      <T >
        <Plural
          n={1}
          singular={
            <>
              <Var>v1</Var>
              <Num>1</Num>
              <Currency currency="USD">1</Currency>
              <DateTime>{new Date(2023)}</DateTime>
              <Var>v2</Var>
              <Num>2</Num>
              <Currency currency="EUR">2</Currency>
              <DateTime>{new Date(2023)}</DateTime>
              <Var>v3</Var>
              <Num>3</Num>
              <Currency currency="JPY">3</Currency>
              <DateTime>{new Date(2023)}</DateTime>
            </>
          }
          plural={
            <>
              <DateTime>{new Date(2023)}</DateTime>
              <Currency currency="JPY">3</Currency>
              <Num>3</Num>
              <Var>v3</Var>
              <DateTime>{new Date(2023)}</DateTime>
              <Currency currency="EUR">2</Currency>
              <Num>2</Num>
              <Var>v2</Var>
              <DateTime>{new Date(2023)}</DateTime>
              <Currency currency="USD">1</Currency>
              <Num>1</Num>
              <Var>v1</Var>
            </>
          }
        />
      </T>

      {/* ========== SPECIAL IDENTIFIER EDGE CASES ========== */}

     

      {/* ========== UNICODE PATHOLOGICAL CASES ========== */}

      {/* Combining characters and normalization edge cases */}
      <T >
        <Plural
          n={1}
          singular="é" /* Pre-composed */
          plural="é" /* Decomposed (e + combining acute) */
          other="ñ vs ñ" /* Different normalizations */
        />
      </T>

      {/* Surrogate pairs and emoji variations */}
      <T >
        <Branch
          branch="emoji"
          basic="👍"
          skin_tone="👍🏽"
          zwj_sequence="👨‍👩‍👧‍👦" /* Family emoji */
          flag="🇺🇸" /* Flag emoji */
          text_vs_emoji="©️ vs ©" /* Text vs emoji variation */
        />
      </T>

      {/* ========== MATHEMATICAL EXPRESSIONS IN NUMBERS ========== */}




      {/* ========== TEMPLATE LITERAL EDGE CASES ========== */}

      {/* Template literals with unusual escape sequences */}
      <T >
        <Plural
          n={1}
          singular={`\\x41`} /* Hex escape */
          plural={`\\u0041`} /* Unicode escape */
          other={`\\101`} /* Octal escape */
        />
      </T>

      {/* ========== BOUNDARY OVERFLOW CONDITIONS ========== */}

      {/* Maximum attribute count */}
      <T >
        <Branch
          branch="many"
          a1="1"
          a2="2"
          a3="3"
          a4="4"
          a5="5"
          a6="6"
          a7="7"
          a8="8"
          a9="9"
          a10="10"
          b1="1"
          b2="2"
          b3="3"
          b4="4"
          b5="5"
          b6="6"
          b7="7"
          b8="8"
          b9="9"
          b10="10"
          c1="1"
          c2="2"
          c3="3"
          c4="4"
          c5="5"
          c6="6"
          c7="7"
          c8="8"
          c9="9"
          c10="10"
          d1="1"
          d2="2"
          d3="3"
          d4="4"
          d5="5"
          d6="6"
          d7="7"
          d8="8"
          d9="9"
          d10="10"
          e1="1"
          e2="2"
          e3="3"
          e4="4"
          e5="5"
          e6="6"
          e7="7"
          e8="8"
          e9="9"
          e10="10"
        />
      </T>

      {/* ========== COUNTER SYNCHRONIZATION EDGE CASES ========== */}

      {/* Nested branches with identical variable patterns */}
      <T >
        <Branch
          branch="outer"
          path1={
            <Branch
              branch="inner"
              option1={
                <>
                  <Var>shared1</Var>
                  <Num>shared2</Num>
                  <Branch
                    branch="deepest"
                    a={<Var>deep1</Var>}
                    b={<Var>deep2</Var>}
                  />
                </>
              }
              option2={
                <>
                  <Var>shared1</Var>
                  <Num>shared2</Num>
                  <Branch
                    branch="deepest"
                    a={<Var>deep1</Var>}
                    b={<Var>deep2</Var>}
                  />
                </>
              }
            />
          }
          path2={
            <Branch
              branch="inner"
              option1={
                <>
                  <Var>shared1</Var>
                  <Num>shared2</Num>
                  <Branch
                    branch="deepest"
                    a={<Var>deep1</Var>}
                    b={<Var>deep2</Var>}
                  />
                </>
              }
              option2={
                <>
                  <Var>shared1</Var>
                  <Num>shared2</Num>
                  <Branch
                    branch="deepest"
                    a={<Var>deep1</Var>}
                    b={<Var>deep2</Var>}
                  />
                </>
              }
            />
          }
        />
      </T>

      {/* ========== SERIALIZATION EDGE CASES ========== */}

      {/* Objects that might cause JSON serialization issues */}
      <T >
        <Plural
          n={count}
          zero={0}
          one={1}
          two={-1}
          few={Infinity}
          other={NaN}
        />
      </T>

      {/* String values that look like JSON */}
      <T >
        <Branch
          branch="json"
          object='{"key": "value"}'
          array="[1, 2, 3]"
          nested='{"a": {"b": [1, {"c": true}]}}'
          escaped='{"quote": "He said \\"hello\\""}'
        />
      </T>

      {/* ========== REGRESSION STRESS TESTS ========== */}

      {/* Pattern that previously caused issues */}
      <T >
        <Plural
          n={count}
          singular={
            <>
              Text content
              <>
                Nested fragment with <Var>variable1</Var>
                <>
                  Deeply nested with <Num>{count}</Num>
                  {}
                  <></>
                  {}
                  <span>Element</span>
                  {}
                  <>Final nested</>
                </>
              </>
              Back to top level
            </>
          }
          plural={
            <div>
              <>Fragment in div</> with <Var>variable2</Var>
              <span>
                <>
                  Deep fragment with{" "}
                  <Currency currency="USD">{amount}</Currency>
                </>
                {null}
                {undefined}
                {false}
                {}
              </span>
            </div>
          }
        />
      </T>

      {/* Maximum complexity single component */}
      <T >
        <Branch
          branch="complex"
          option1={
            <>
              Start {true} {false} {null} {undefined} {} <></>
              <Plural
                n={count}
                zero={
                  <>
                    Zero with <Var name="v1">var1</Var>
                  </>
                }
                one={
                  <>
                    One with <Num name="n1">{count}</Num> {NaN}
                  </>
                }
                two={
                  <>
                    Two with{" "}
                    <Currency currency="USD" name="c1">
                      {amount}
                    </Currency>{" "}
                    {Infinity}
                  </>
                }
                few={
                  <>
                    Few with <DateTime name="d1">{date}</DateTime> 
                  </>
                }
                many={
                  <Branch
                    branch="nested"
                    c={
                      <>
                        {0xff} and {0o755} and {0b1111}
                      </>
                    }
                  />
                }
                other={
                  <>
                    Other {+0} vs {-0}
                  </>
                }
              />
              End {} <></>
            </>
          }
          option2="Simple option for comparison"
        />
      </T>
    </>
  );
}

/*
EXTREME EDGE CASES COVERED:

1. **Expression Container Edge Cases:**
   - Empty JSX expressions {} mixed with content
   - Complex patterns of {} and <></>
   - Nested empty expressions

2. **Boolean Context Edge Cases:**
   - All boolean permutations in expressions
   - Boolean vs null vs undefined combinations
   - Mixed falsy values

3. **Numeric Precision Edge Cases:**
   - Floating point precision boundaries
   - Machine epsilon and subnormal numbers
   - Scientific notation variations (+/- exponents)

4. **Whitespace Pathological Cases:**
   - Zero-width characters
   - Unusual unicode spaces (thin, hair, figure, punctuation)
   - Mixed line endings (LF, CRLF, CR)

5. **Fragment Pathological Nesting:**
   - Maximum fragment nesting with mixed empty/content
   - Alternating empty/content patterns
   - Complex fragment hierarchies

6. **Variable Component Stress Tests:**
   - Variables with edge case names (empty, spaces, special chars)
   - Maximum variable density
   - Reverse order variable patterns

7. **Special Identifier Edge Cases:**
   - JavaScript reserved words (NaN, Infinity, undefined)
   - Mixed special identifiers in expressions

8. **Unicode Pathological Cases:**
   - Combining characters and normalization differences
   - Surrogate pairs, emoji variations, ZWJ sequences
   - Text vs emoji selectors

9. **Mathematical Expressions:**
   - Operations that resolve to constants (Math.PI, Math.E)
   - Bitwise operations (<<, >>, ^, &, |, ~)
   - Edge mathematical values

10. **Template Literal Edge Cases:**
    - Unusual escape sequences (hex, unicode, octal)
    - Raw strings vs processed strings
    - Mixed raw/processed content

11. **Boundary Overflow Conditions:**
    - Maximum attribute count (50+ attributes)
    - Stress testing component limits

12. **Counter Synchronization Edge Cases:**
    - Nested branches with identical variable patterns
    - Deep nesting with parallel paths
    - Counter consistency across complex hierarchies

13. **Serialization Edge Cases:**
    - Values that might cause JSON issues (Infinity, NaN)
    - String values that look like JSON
    - Escaped quote handling

14. **Regression Stress Tests:**
    - Known problematic patterns
    - Maximum complexity single component
    - Everything combined in one test

These edge cases should expose any remaining weaknesses in:
- Empty expression handling
- Boolean serialization
- Floating point precision
- Unicode normalization
- Fragment nesting logic
- Counter management
- JSON serialization stability
*/


File: ./src/app/additional/page.tsx
----------------------------------------
import { T, Branch, Plural, Var, Num, Currency, DateTime } from "gt-next";

// Edge cases designed to test the SWC plugin hash calculation

export default function AdditionalEdgeCases() {
  const count = 5;
  const amount = 99.99;
  const date = new Date();
  const location = "home";

  return (
    <>
      {/* Edge Case 1: Deeply nested Branch components */}
      <T >
        <Branch
          branch={location}
          home={
            <Branch
              branch="time"
              morning="Good morning at home"
              evening={
                <>
                  Good evening at <Var>home</Var> with{" "}
                  <Branch
                    branch="weather"
                    sunny="sunny skies"
                    rainy="rainy weather"
                  />
                </>
              }
            />
          }
          work="At the office"
        />
      </T>

      {/* Edge Case 2: Complex numeric edge cases */}
      {/* <T>
        <Plural
          n={count}
          zero={0}
          one={-0}
          two={Number.MAX_SAFE_INTEGER}
          few={Number.MIN_SAFE_INTEGER}
          many={1.7976931348623157e308}
          other={-1.7976931348623157e308}
        />
      </T> */}

      {/* Edge Case 3: Special JavaScript values in branches */}
      <T >
        <Branch
          branch="type"
          number={42}
          bigNumber={9007199254740991}
          scientific={1e-20}
          negativeScientific={-1e20}
          hex={0xdeadbeef}
          octal={0o755}
          binary={0b11111111}
        />
      </T>

      {/* Edge Case 4: Whitespace preservation in complex structures */}
      <T >
        <Branch
          branch="format"
          compact={
            <>
              No spaces<Var>here</Var>at all
            </>
          }
          spaced={
            <>
              {" "}
              Lots of spaces <Var> here </Var> everywhere{" "}
            </>
          }
          mixed={
            <>
              Text<span> embedded spaces </span>more text
              <Var> padded var </Var>
              final text
            </>
          }
        />
      </T>

      {/* Edge Case 5: Multiple variable types in single branch */}
      <T>
        <Plural
          n={count}
          singular={
            <>
              Transaction: <Currency currency="USD">{amount}</Currency> on{" "}
              <DateTime>{date}</DateTime> for <Num>{0.15}</Num> tax with{" "}
              <Var name="reference">REF-123</Var>
            </>
          }
          plural={
            <div>
              <Currency currency="EUR">{amount * count}</Currency> total from{" "}
              <Num>{count}</Num> transactions on <DateTime>{date}</DateTime>
            </div>
          }
        />
      </T>

      {/* Edge Case 6: Empty and minimal content variations */}
      <T>
        <Branch
          branch="content"
          empty=""
          space=" "
          newline={"\n"}
          tab={"\t"}
          minimal={<span></span>}
          singleChar="x"
        />
      </T>

      {/* Edge Case 7: Complex fragment nesting */}
      <T>
        <Plural
          n={count}
          singular={
            <>
              Outer fragment
              <>
                Nested fragment with <Var>variable</Var>
                <>
                  Deep nested with <Num>{count}</Num>
                  <></>
                  <>More nesting</>
                </>
              </>
              Back to outer
            </>
          }
          plural={
            <div>
              <>Fragment in div</>
              <span>
                <>
                  Fragment in span with{" "}
                  <Currency currency="USD">{amount}</Currency>
                </>
              </span>
            </div>
          }
        />
      </T>

      {/* Edge Case 8: Unicode and special characters */}
      <T>
        <Branch
          branch="language"
          english="Hello 👋 World"
          chinese="你好世界"
          arabic="مرحبا بالعالم"
          emoji="🚀 🌟 ✨ 💫 ⭐"
          symbols="© ® ™ € £ ¥ § ¶ † ‡"
          math="∞ ≠ ≤ ≥ ± ∓ × ÷ √"
        />
      </T>

      {/* Edge Case 9: Very long content strings */}
      <T>
        <Branch
          branch="size"
          short="Brief"
          long={`Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.`}
          mixed={
            <>
              Very long text with <Var>embedded variables</Var> that continues
              for a very long time and includes multiple <Num>{9999999}</Num>{" "}
              numeric values and{" "}
              <Currency currency="USD">{1234567.89}</Currency> monetary amounts
              spread throughout the content to test how the algorithm handles
              very large content blocks with mixed variable types.
            </>
          }
        />
      </T>

      {/* Edge Case 10: Boundary numeric values */}
      <T>
        <Plural
          n={count}
          zero={0.0}
          one={1e-323} // Smallest positive number
          two={5e-324} // Smallest subnormal
          few={1.7976931348623157e308} // Largest finite
          many={-1.7976931348623157e308} // Largest negative finite
          other={2.2250738585072014e-308} // Smallest normal positive
        />
      </T>

      {/* Edge Case 11: Attribute edge cases with HTML props */}
      <T
        placeholder="Enter text"
        title="Tooltip text"
        alt="Alt text"
      >
        <Branch
          branch="element"
          input={
            <input placeholder="Branch placeholder" title="Branch title" />
          }
          image={
            <img src="test.jpg" alt="Branch image" title="Branch image title" />
          }
          link={
            <a href="#" aria-label="Branch link" aria-describedby="desc">
              Link
            </a>
          }
        />
      </T>

      {/* Edge Case 12: Mixed element types in branches */}
      <T>
        <Plural
          n={count}
          singular={
            <article>
              <h1>Single Item</h1>
              <p>
                Description with <Var>details</Var>
              </p>
              <footer>
                <>
                  Footer with <Currency currency="USD">{amount}</Currency>
                  <span>
                    and <DateTime>{date}</DateTime>
                  </span>
                </>
              </footer>
            </article>
          }
          plural={
            <section>
              <header>
                <h2>
                  <Num>{count}</Num> Items
                </h2>
              </header>
              <main>
                <>
                  <p>
                    Multiple items totaling{" "}
                    <Currency currency="USD">{amount * count}</Currency>
                  </p>
                  <ul>
                    <li>
                      Item with <Var>variable</Var>
                    </li>
                  </ul>
                </>
              </main>
            </section>
          }
        />
      </T>

      {/* Edge Case 13: Self-closing and void elements */}
      <T>
        <Branch
          branch="type"
          line={
            <>
              <hr />
              Line break
              <br />
              New line
            </>
          }
          image={
            <>
              <img src="test.jpg" alt="Test" />
              Image with <Var>caption</Var>
            </>
          }
          input={
            <>
              <input type="text" placeholder="Input" />
              Field with <Num>{count}</Num>
            </>
          }
        />
      </T>

      {/* Edge Case 14: Duplicate content in different branches (should have same hash) */}
      <T>
        <Branch
          branch="copy"
          version1={
            <>
              Identical content with <Var>same variable</Var> and{" "}
              <Num>{count}</Num>
            </>
          }
          version2={
            <>
              Identical content with <Var>same variable</Var> and{" "}
              <Num>{count}</Num>
            </>
          }
          different={
            <>
              Different content with <Var>other variable</Var> and{" "}
              <Num>{count + 1}</Num>
            </>
          }
        />
      </T>

      {/* Edge Case 15: Component nesting edge cases */}
      <T>
        <Branch
          branch="structure"
          nested={
            <div>
              <Plural
                n={count}
                singular={
                  <span>
                    Nested plural: <Var>single</Var>
                  </span>
                }
                plural={
                  <Branch
                    branch="inner"
                    option1="Double nested!"
                    option2={
                      <>
                        With <Currency currency="USD">{amount}</Currency>
                      </>
                    }
                  />
                }
              />
            </div>
          }
          flat="Simple flat content"
        />
      </T>
    </>
  );
}


File: ./src/app/page.tsx
----------------------------------------
import {
  Branch,
  Currency,
  DateTime,
  LocaleSelector,
  Num,
  Plural,
  T,
  Var,
} from "gt-next";

export default function EdgeCasesTest() {
  const variable = "variable content";
  const count = 5;
  const pluralText = "files";
  const messages = { files: "Files", file: "File" };

  return (
    <>
      <LocaleSelector />

      <T>Normal text</T>
      <T>
        Normal text <div>and some nesting</div>
      </T>

      <T>
        <Plural n={1} singular="File" plural={"Files"} />
      </T>
      <T>
        <Branch branch="file" file={"file.svg"} directory={"public"} />
      </T>

      <T>
        <Plural n={1} singular="File chan ge" plural={42} />
      </T>
      <T>
        <Plural n={1} singular={true} plural={false} />
      </T>
      <T>
        <Plural n={1} singular={null} plural="Files" />
      </T>

      <T>
        <Plural n={1} singular={`File`} plural={`Files`} />
      </T>

      <T>
        <Plural
          n={1}
          singular={<>Single file</>}
          plural={<>Multiple files</>}
        />
      </T>

      <T>
        <Plural
          n={1}
          singular={<span>Single file</span>}
          plural={<span>Multiple files</span>}
        />
      </T>

      <T>
        <Plural
          n={1}
          singular={<Var>{variable}</Var>}
          plural={
            <>
              Multiple <Var>{variable}</Var>s
            </>
          }
        />
      </T>

      <T>
        <Plural
          n={1}
          singular={
            <Branch
              branch="type"
              file={
                <Plural
                  n={1}
                  singular={<>Single nested file</>}
                  plural={"Multiple nested files"}
                />
              }
              directory={<>Public directory</>}
            />
          }
          plural={"Multiple top-level items"}
        />
      </T>

      <T>
        <Plural n={1} singular="" plural="Files" />
      </T>
      <T>
        <Plural n={1} singular="File" plural={""} />
      </T>

      <T>
        <Plural n={1} singular="   File   " plural={"   Files   "} />
      </T>
      <T>
        <Plural
          n={1}
          singular={`
            Multiline
            File
          `}
          plural="Files"
        />
      </T>

      <T>
        <Plural
          n={1}
          singular="File with emoji 📁"
          plural={"Files with emoji 📁📂"}
        />
      </T>
      <T>
        <Branch
          branch="file"
          file="special-chars!@#$%^&*().svg"
          directory={"unicode-path-ñáéíóú"}
        />
      </T>

      <T>
        <div>hello</div>
        <Branch
          branch="level1"
          option1={
            <Branch
              branch="level2"
              option1={
                <Plural
                  n={1}
                  singular={
                    <Branch
                      branch="level3"
                      option1={<>Deep option 1</>}
                      option2={<Var>{variable}</Var>}
                    />
                  }
                  plural={
                    <Branch
                      branch="level3"
                      option1={<Currency currency="USD">100</Currency>}
                      option2={<DateTime>{new Date()}</DateTime>}
                    />
                  }
                />
              }
              option2="Level 2 option 2"
            />
          }
          option2="Level 1 option 2"
        />
      </T>
      <T>
        <div>Item 1</div>
        <div>Item 2</div>
        <div>Item 3</div>
        <Var>{variable}</Var>
        <Num>{count}</Num>
        <Currency currency="USD">100</Currency>
        <DateTime>{new Date()}</DateTime>
        <Plural n={1} singular="File" plural="Files" />
        <Branch branch="file" file="test.svg" directory="public" />
        <div>Item 4</div>
        <div>Item 5</div>
        <Plural n={2} singular="Item" plural={"Items"} />
        <Branch branch="type" image="icon.png" text="Text" />
      </T>

      <T>
        change
        <Plural
          n={1}
          singular={<>Here is some translatable static content cha ge</>}
          plural={"Files"}
        />
      </T>

      <T>
        <Plural
          n={1}
          singular={
            <Plural
              n={1}
              singular={
                <Branch branch="file" file="file.svg" directory="public" />
              }
              plural="Files"
            />
          }
          plural={"Files change"}
        />
      </T>
    </>
  );
}


File: ./src/app/big-test/page.tsx
----------------------------------------
import { T, Plural, Branch, Var, Num, Currency, DateTime } from "gt-next";

export default function ComprehensiveEdgeCases() {
  const variable = "test";
  const count = 5;
  const amount = 100.5;
  const date = new Date();

  return (
    <>
      {/* ========== BASIC WHITESPACE EDGE CASES ========== */}

      {/* Leading/trailing spaces with different sibling positions */}
      <T>
        <div>before</div> space after div
      </T>

      <T>
        space before div <div>after</div>
      </T>

      <T>
        <div>first</div> middle space <div>last</div>
      </T>

      {/* Multiple consecutive spaces */}
      <T>word1 word2 word3</T>

      {/* Tab and newline combinations */}
      <T>line1 tabbed line empty line above</T>

      {/* Zero-width and unusual whitespace */}
      <T>word1 word2 word3</T>

      {/* ========== FRAGMENT EDGE CASES ========== */}

      {/* Empty fragments */}
      <T>
        <Plural n={1} singular={<></>} plural="files" />
      </T>

      {/* Nested fragments */}
      <T>
        <Plural
          n={1}
          singular={
            <>
              <>nested</> fragment
            </>
          }
          plural="files"
        />
      </T>

      {/* Fragments with only whitespace */}
      <T>
        <Plural n={1} singular={<> </>} plural={<></>} />
      </T>

      {/* Fragments mixed with elements */}
      <T>
        <>text before</>
        <div>element</div>
        <>text after</>
      </T>

      {/* ========== ATTRIBUTE VALUE EDGE CASES ========== */}

      {/* All plural forms */}
      <T>
        <Plural
          n={count}
          zero="zero items"
          one="one item"
          two="two items"
          few="few items"
          many="many items"
          other="other items"
          singular="singular form"
          plural="plural form"
        />
      </T>

      {/* Mixed attribute types in same component */}
      <T>
        <Plural
          n={1}
          zero=""
          one={null}
          two={42}
          few={true}
          many={false}
          other={`template`}
          singular={<>fragment</>}
          plural={<span>element</span>}
        />
      </T>

      {/* Extremely long attribute values */}
      <T>
        <Plural
          n={1}
          singular="This is an extremely long string value that tests how the plugin handles very long attribute content that might span multiple lines and contain various characters including unicode ñáéíóú and emoji 📁📂🎉"
          plural={`This is an extremely long template literal that tests how the plugin handles very long template content with potential whitespace normalization issues and various characters`}
        />
      </T>

      {/* ========== BRANCH COMPONENT EDGE CASES ========== */}

      {/* All empty branch attributes */}
      <T>
        <Branch
          branch="type"
          option1=""
          option2={null}
          option3={<></>}
          option4={false}
        />
      </T>

      {/* Dynamic branch names (should be static) */}
      <T>
        <Branch
          branch="file"
          file="valid"
          directory="valid"
          unknown_option="should be included"
          another_option={<>fragment content</>}
        />
      </T>

      {/* ========== VARIABLE COMPONENT EDGE CASES ========== */}

      {/* All variable types with different content patterns */}
      <T>
        <Var name="custom_name">static content</Var>
        <Var>{variable}</Var>
        <Var> padded content </Var>
        <Var></Var>
      </T>

      <T>
        <Num name="count_1">{count}</Num>
        <Num>42</Num>
        <Num>3.14159</Num>
      </T>

      <T>
        <Currency currency="USD" name="price_1">
          {amount}
        </Currency>
        <Currency currency="EUR">99.99</Currency>
        <Currency currency="JPY">1000</Currency>
      </T>

      <T>
        <DateTime name="timestamp_1">{date}</DateTime>
        <DateTime>{new Date()}</DateTime>
      </T>

      {/* ========== EXTREME NESTING SCENARIOS ========== */}

      {/* 5-level deep nesting */}
      <T>
        <Branch
          branch="level1"
          option1={
            <Plural
              n={1}
              singular={
                <Branch
                  branch="level2"
                  option1={
                    <Plural
                      n={1}
                      singular={
                        <Branch
                          branch="level3"
                          option1={
                            <Plural
                              n={1}
                              singular={
                                <Var name="deep_var">
                                  deeply nested variable
                                </Var>
                              }
                              plural="deep files"
                            />
                          }
                          option2="level3 option2"
                        />
                      }
                      plural="level2 plurals"
                    />
                  }
                  option2="level2 option2"
                />
              }
              plural="level1 plurals"
            />
          }
          option2="level1 option2"
        />
      </T>

      {/* Mixed component types in complex structure */}
      <T>
        <div className="container">
          <Plural
            n={count}
            singular={
              <div>
                You have <Num>{count}</Num> item costing{" "}
                <Currency currency="USD">{amount}</Currency>
                on <DateTime>{date}</DateTime> in the
                <Branch
                  branch="location"
                  home="home folder"
                  work={<>work directory</>}
                />
              </div>
            }
            plural={
              <div>
                You have <Num>{count}</Num> items costing{" "}
                <Currency currency="USD">{amount * count}</Currency>
                <>fragments mixed</> with elements
              </div>
            }
          />
        </div>
      </T>

      {/* ========== COUNTER CONSISTENCY TESTS ========== */}

      {/* Multiple variables that should have same keys across branches */}
      <T>
        <Branch
          branch="type"
          option1={
            <div>
              First: <Var>{variable}</Var>
              Second: <Num>{count}</Num>
              Third: <Currency currency="USD">{amount}</Currency>
            </div>
          }
          option2={
            <div>
              First: <Var>{variable}</Var>
              Second: <Num>{count}</Num>
              Third: <Currency currency="USD">{amount}</Currency>
            </div>
          }
        />
      </T>

      {/* Parallel branches with fragments vs elements */}
      <T>
        <Plural
          n={1}
          singular={
            <>
              <Var>var1</Var> and <Num>num1</Num>
            </>
          }
          plural={
            <div>
              <Var>var1</Var> and <Num>num1</Num>
            </div>
          }
        />
      </T>

      {/* ========== LITERAL VALUE EDGE CASES ========== */}

      {/* Different number formats */}
      <T>
        <Plural
          n={1}
          zero={0}
          one={1}
          two={-1}
          few={3.14159}
          many={1e6}
          other={0xff}
        />
      </T>

      {/* Boolean combinations */}
      <T>
        <Branch
          branch="status"
          active={true}
          inactive={false}
          unknown={null}
          pending=""
        />
      </T>

      {/* Mixed quotes and escaping */}
      <T>
        <Plural
          n={1}
          singular="Single 'quotes' inside"
          plural={'Double "quotes" inside'}
          other={`Template with 'both' "types"`}
        />
      </T>

      {/* ========== UNICODE AND SPECIAL CHARACTERS ========== */}

      {/* Various unicode categories */}
      <T>
        <Branch
          branch="language"
          english="Hello World"
          spanish="Hola Mundo ñáéíóú"
          chinese="你好世界"
          emoji="🌍🌎🌏 Hello 👋"
          arabic="مرحبا بالعالم"
          russian="Привет мир"
        />
      </T>

      {/* Special/control characters */}
      <T>
        <Plural
          n={1}
          singular="Line1\nLine2\tTabbed"
          plural="Special: !@#$%^&*()_+-=[]{}|;:,.<>?"
          other={`Template with \${variable} and \`backticks\``}
        />
      </T>

      {/* ========== TEMPLATE LITERAL EDGE CASES ========== */}

      {/* Simple templates (should work) */}
      <T>
        <Plural
          n={1}
          singular={`simple template`}
          plural={`another simple template`}
        />
      </T>

      {/* Multiline templates */}
      <T>
        <Branch
          branch="format"
          single={`single line`}
          multi={`
            line 1
            line 2
            line 3
          `}
        />
      </T>

      {/* ========== BOUNDARY CONDITIONS ========== */}

      {/* Empty component */}
      <T>
        <Var></Var>
      </T>

      {/* Component with only whitespace children */}
      <T>
        <Var> </Var>
      </T>

      {/* ========== REGRESSION TEST CASES ========== */}

      {/* Known problematic patterns from previous issues */}
      <T>
        Normal text <div>nested content</div> more text
      </T>

      <T>
        <Plural
          n={count}
          zero="No files"
          one="One file"
          two="Two files"
          few="Few files"
          many="Many files"
          other="Other files"
          singular={<>Single file</>}
        />
      </T>

      <T>
        <Branch
          branch="context"
          option1=""
          option2="   padded   "
          option3={<Var>{variable}</Var>}
          option4={<>fragment content</>}
          option5={<div>element content</div>}
        />
      </T>
    </>
  );
}

/*
EDGE CASES COVERED:

1. **Whitespace Normalization:**
   - Leading/trailing spaces in different sibling contexts
   - Multiple consecutive spaces
   - Mixed whitespace types (spaces, tabs, newlines)
   - Zero-width and unusual whitespace characters

2. **Fragment Handling:**
   - Empty fragments
   - Nested fragments
   - Fragments with only whitespace
   - Fragments mixed with regular elements

3. **Attribute Values:**
   - All CLDR plural forms (zero, one, two, few, many, other, singular, plural)
   - Mixed data types (strings, numbers, booleans, null, fragments, elements)
   - Extremely long strings
   - Unicode and special characters

4. **Variable Components:**
   - All variable types (Var, Num, Currency, DateTime)
   - Custom name attributes
   - Empty components
   - Padded content

5. **Counter Consistency:**
   - Parallel branches with same variable sequences
   - Fragment vs element containers with same content
   - Deep nesting scenarios

6. **Literal Values:**
   - Different number formats (integers, floats, scientific notation, hex)
   - Boolean combinations
   - Various string quote types

7. **Boundary Conditions:**
   - Empty components
   - Components with no valid attributes
   - Components with only whitespace

8. **Stress Testing:**
   - Deep nesting (5+ levels)
   - Many components in sequence
   - Complex mixed structures

9. **Regression Cases:**
   - Known problematic patterns from previous fixes
   - Hash mismatch scenarios
   - Counter increment edge cases

This should expose any remaining issues with:
- Whitespace preservation logic
- Fragment vs element handling consistency
- Counter increment/restore mechanisms
- Attribute value processing
- Unicode handling
- Template literal processing
- Hash generation consistency
*/


